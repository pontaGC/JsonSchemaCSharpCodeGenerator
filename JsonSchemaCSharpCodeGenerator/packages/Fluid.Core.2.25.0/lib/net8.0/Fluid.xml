<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fluid</name>
    </assembly>
    <members>
        <member name="M:Fluid.Ast.BinaryExpression.EvaluateAsync(Fluid.TemplateContext)">
            <summary>
            Evaluates two operands and tries to avoid state machines.
            </summary>
        </member>
        <member name="T:Fluid.Ast.CallbackStatement">
            <summary>
            An instance of this class is used to execute some custom code in a template.
            </summary>
        </member>
        <member name="P:Fluid.Ast.FunctionCallArgument.Name">
            <summary>
            Gets the name of the argument, or <c>null</c> if not defined.
            </summary>
        </member>
        <member name="M:Fluid.Ast.MemberSegment.ResolveAsync(Fluid.Values.FluidValue,Fluid.TemplateContext)">
            <summary>
            Resolves the member of a <see cref="T:Fluid.Values.FluidValue"/> instance.
            </summary>
        </member>
        <member name="T:Fluid.Ast.RenderStatement">
            <summary>
            The render tag can only access immutable environments, which means the scope of the context that was passed to the main template, the options' scope, and the model.
            </summary>
        </member>
        <member name="T:Fluid.TemplateCache">
            <summary>
            This implementation of <see cref="T:Fluid.ITemplateCache"/> caches templates in memory.
            It uses a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> to store the templates.
            If the template file is modified, the cache entry is removed.
            </summary>
        </member>
        <member name="T:Fluid.FilterArguments">
            <summary>
            Represents the list of arguments that are passed to a <see cref="T:Fluid.FilterDelegate"/>
            when invoked.
            </summary>
        </member>
        <member name="M:Fluid.Filters.MiscFilters.Handleize(Fluid.Values.FluidValue,Fluid.FilterArguments,Fluid.TemplateContext)">
            <summary>
            Converts from pascal/camel case to lower kebab-case.
            </summary>
        </member>
        <member name="M:Fluid.FluidParser.Compile">
            <summary>
            Compiles all expressions.
            </summary>
        </member>
        <member name="T:Fluid.FluidParserOptions">
            <summary>
            Parser options.
            </summary>
        </member>
        <member name="P:Fluid.FluidParserOptions.AllowFunctions">
            <summary>
            Gets whether functions are allowed in templates. Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:Fluid.FluidParserOptions.AllowParentheses">
            <summary>
            Gets whether parentheses are allowed in templates. Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:Fluid.FluidParserOptions.AllowLiquidTag">
            <summary>
            Gets whether the inline liquid tag is allowed in templates. Default is <c>false</c>.
            </summary>
        </member>
        <member name="M:Fluid.FluidTemplateExtensions.RenderAsync(Fluid.IFluidTemplate,System.IO.TextWriter)">
            <summary>
            Renders a Fluid template asynchronously to a specified text writer. It uses a default template context for
            rendering.
            </summary>
            <param name="template">Specifies the fluid template to be rendered.</param>
            <param name="textWriter">Defines the output destination for the rendered content.</param>
            <returns>Returns a ValueTask representing the asynchronous rendering operation.</returns>
        </member>
        <member name="M:Fluid.FluidTemplateExtensions.RenderAsync(Fluid.IFluidTemplate,System.IO.TextWriter,Fluid.TemplateContext)">
            <summary>
            Renders a Fluid template asynchronously to a specified text writer using a default encoder.
            </summary>
            <param name="template">Represents the template to be rendered.</param>
            <param name="textWriter">Used to write the rendered output of the template.</param>
            <param name="context">Provides the context for rendering the template.</param>
            <returns>Returns a ValueTask representing the asynchronous operation.</returns>
        </member>
        <member name="M:Fluid.FluidTemplateExtensions.RenderAsync(Fluid.IFluidTemplate,System.IO.TextWriter,Fluid.TemplateContext,System.Text.Encodings.Web.TextEncoder,System.Boolean)">
            <summary>
            Renders a Fluid template asynchronously to a specified text writer using a given context and encoder.
            </summary>
            <param name="template">Specifies the fluid template to be rendered.</param>
            <param name="textWriter">Defines the output destination for the rendered content.</param>
            <param name="context">Provides the context in which the template is evaluated.</param>
            <param name="encoder">Handles the encoding of the output content.</param>
            <param name="isolateContext">Indicates whether to evaluate the template in a separate context scope.</param>
            <returns>Returns a ValueTask representing the asynchronous operation.</returns>
        </member>
        <member name="M:Fluid.FluidTemplateExtensions.RenderAsync(Fluid.IFluidTemplate)">
            <summary>
            Renders the specified Fluid template asynchronously using a new TemplateContext.
            </summary>
            <param name="template">The Fluid template to render.</param>
            <returns>A ValueTask that represents the asynchronous rendering operation. The task result contains the rendered template as a string.</returns>
        </member>
        <member name="M:Fluid.FluidTemplateExtensions.RenderAsync(Fluid.IFluidTemplate,Fluid.TemplateContext)">
            <summary>
            Renders the specified Fluid template asynchronously using the provided context and a default text encoder.
            </summary>
            <param name="template">The Fluid template to render.</param>
            <param name="context">The context to use for rendering the template.</param>
            <returns>A ValueTask that represents the asynchronous rendering operation. The task result contains the rendered template as a string.</returns>
        </member>
        <member name="M:Fluid.FluidTemplateExtensions.RenderAsync(Fluid.IFluidTemplate,Fluid.TemplateContext,System.Text.Encodings.Web.TextEncoder,System.Boolean)">
            <summary>
            Renders the specified Fluid template asynchronously using the provided context, encoder, and isolation settings.
            </summary>
            <param name="template">The Fluid template to render.</param>
            <param name="context">The context to use for rendering the template.</param>
            <param name="encoder">The text encoder to use for encoding the output.</param>
            <param name="isolateContext">A boolean value indicating whether to isolate the context during rendering.</param>
            <returns>A ValueTask that represents the asynchronous rendering operation. The task result contains the rendered template as a string.</returns>
        </member>
        <member name="M:Fluid.FluidTemplateExtensions.Render(Fluid.IFluidTemplate)">
            <summary>
            Renders the template to a string.
            </summary>
            <param name="template">The template to render.</param>
            <returns>The rendered template as a string.</returns>
        </member>
        <member name="M:Fluid.FluidTemplateExtensions.Render(Fluid.IFluidTemplate,Fluid.TemplateContext)">
            <summary>
            Renders the template to a string using the specified context.
            </summary>
            <param name="template">The template to render.</param>
            <param name="context">The context to use for rendering.</param>
            <returns>The rendered template as a string.</returns>
        </member>
        <member name="M:Fluid.FluidTemplateExtensions.Render(Fluid.IFluidTemplate,Fluid.TemplateContext,System.Text.Encodings.Web.TextEncoder,System.Boolean)">
            <summary>
            Renders the template to the specified text writer using the specified context and text encoder.
            </summary>
            <param name="template">The template to render.</param>
            <param name="context">The context to use for rendering.</param>
            <param name="encoder">The text encoder to use for rendering.</param>
            <param name="isolateContext">A boolean value indicating whether to isolate the context during rendering.</param>
        </member>
        <member name="M:Fluid.FluidTemplateExtensions.Render(Fluid.IFluidTemplate,Fluid.TemplateContext,System.Text.Encodings.Web.TextEncoder,System.IO.TextWriter)">
            <summary>
            Renders the template to the specified text writer using the specified context and text encoder.
            This method is obsolete and will be removed in a future version.
            </summary>
            <param name="template">The template to render.</param>
            <param name="context">The context to use for rendering.</param>
            <param name="encoder">The text encoder to use for rendering.</param>
            <param name="writer">The text writer to write the rendered template to.</param>
        </member>
        <member name="T:Fluid.FunctionArguments">
            <summary>
            Represents the list of arguments of a function.
            </summary>
        </member>
        <member name="T:Fluid.ITemplateCache">
            <summary>
            Interface for caching parsed templates in memory.
            </summary>
        </member>
        <member name="M:Fluid.ITemplateCache.TryGetTemplate(System.String,System.DateTimeOffset,Fluid.IFluidTemplate@)">
            <summary>
            Attempts to retrieve a cached template based on the provided subpath.
            </summary>
            <param name="subpath">The relative path that identifies the file.</param>
            <param name="lastModified">The last modified time of the template file.</param>
            <param name="template">The cached template if found.</param>
            <returns>True if the template is found in the cache; otherwise, false.</returns>
        </member>
        <member name="M:Fluid.ITemplateCache.SetTemplate(System.String,System.DateTimeOffset,Fluid.IFluidTemplate)">
            <summary>
            Stores a template in the cache with the specified subpath as the key.
            </summary>
            <param name="subpath">The relative path that identifies the file.</param>
            <param name="lastModified">The last modified time of the template file.</param>
            <param name="template">The template to store in the cache.</param>
        </member>
        <member name="P:Fluid.MemberAccessStrategy.IgnoreCasing">
            <summary>
            Gets or sets whether the member casing is ignored or not.
            </summary>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register``1(Fluid.MemberAccessStrategy)">
            <summary>
            Registers a type and all its public properties.
            </summary>
            <typeparam name="T">The type to register.</typeparam>
            <param name="strategy">The <see cref="T:Fluid.MemberAccessStrategy"/>.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register(Fluid.MemberAccessStrategy,System.Type)">
            <summary>
            Registers a type and all its public properties.
            </summary>
            <param name="strategy">The <see cref="T:Fluid.MemberAccessStrategy"/>.</param>
            <param name="type">The type to register.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register``1(Fluid.MemberAccessStrategy,System.String[])">
            <summary>
            Registers a limited set of properties in a type.
            </summary>
            <typeparam name="T">The type to register.</typeparam>
            <param name="strategy">The <see cref="T:Fluid.MemberAccessStrategy"/>.</param>
            <param name="names">The names of the properties in the type to register.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register``1(Fluid.MemberAccessStrategy,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            Registers a limited set of properties in a type.
            </summary>
            <typeparam name="T">The type to register.</typeparam>
            <param name="strategy">The <see cref="T:Fluid.MemberAccessStrategy"/>.</param>
            <param name="names">The property's expressions in the type to register.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register(Fluid.MemberAccessStrategy,System.Type,System.String[])">
            <summary>
            Registers a limited set of properties in a type.
            </summary>
            <param name="strategy">The <see cref="T:Fluid.MemberAccessStrategy"/>.</param>
            <param name="type">The type to register.</param>
            <param name="names">The names of the properties in the type to register.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register``1(Fluid.MemberAccessStrategy,System.String,Fluid.IMemberAccessor)">
            <summary>
            Registers a named property when accessing a type using a <see cref="T:Fluid.IMemberAccessor"/>
            to retrieve the value. The name of the property doesn't have to exist on the object.
            </summary>
            <typeparam name="T">The type to register.</typeparam>
            <param name="strategy">The <see cref="T:Fluid.MemberAccessStrategy"/>.</param>
            <param name="name">The name of the property to intercept.</param>
            <param name="getter">The <see cref="T:Fluid.IMemberAccessor"/> instance used to retrieve the value.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register``1(Fluid.MemberAccessStrategy,Fluid.IMemberAccessor)">
            <summary>
            Registers a type using a <see cref="T:Fluid.IMemberAccessor"/> to retrieve any of
            its property values.
            </summary>
            <typeparam name="T">The type to register.</typeparam>
            <param name="strategy">The <see cref="T:Fluid.MemberAccessStrategy"/>.</param>
            <param name="getter">The <see cref="T:Fluid.IMemberAccessor"/> instance used to retrieve the value.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register(Fluid.MemberAccessStrategy,System.Type,Fluid.IMemberAccessor)">
            <summary>
            Registers a type using a <see cref="T:Fluid.IMemberAccessor"/> to retrieve any of
            its property values.
            </summary>
            <param name="strategy">The <see cref="T:Fluid.MemberAccessStrategy"/>.</param>
            <param name="type">The type to register.</param>
            <param name="getter">The <see cref="T:Fluid.IMemberAccessor"/> instance used to retrieve the value.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register``2(Fluid.MemberAccessStrategy,System.Func{``0,System.String,``1})">
            <summary>
            Registers a type with a <see cref="T:Func{T, string, TResult}"/> to retrieve any of
            its property values.
            </summary>
            <typeparam name="T">The type to register.</typeparam>
            <typeparam name="TResult">The type to return.</typeparam>
            <param name="strategy">The <see cref="T:Fluid.MemberAccessStrategy"/> to register.</param>
            <param name="accessor">The <see cref="T:Func{T, string, TResult}"/> instance used to retrieve the value.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register``2(Fluid.MemberAccessStrategy,System.Func{``0,System.String,Fluid.TemplateContext,``1})">
            <summary>
            Registers a type with a <see cref="T:Func{T, string, TemplateContext, TResult}"/> to retrieve any of
            its property values.
            </summary>
            <typeparam name="T">The type to register.</typeparam>
            <typeparam name="TResult">The type to return.</typeparam>
            <param name="strategy">The <see cref="T:Fluid.MemberAccessStrategy"/>.</param>
            <param name="accessor">The <see cref="T:Func{T, string, TemplateContext, TResult}"/> instance used to retrieve the value.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register``2(Fluid.MemberAccessStrategy,System.Func{``0,System.String,System.Threading.Tasks.Task{``1}})">
            <summary>
            Registers a type with a <see cref="T:Func{T, string, Task{TResult}}"/> to retrieve any of
            its property values.
            </summary>
            <param name="strategy">The <see cref="T:Fluid.MemberAccessStrategy"/>.</param>
            <param name="accessor">The <see cref="T:Func{T, string, Task{Object}}"/> instance used to retrieve the value.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register``2(Fluid.MemberAccessStrategy,System.Func{``0,System.String,Fluid.TemplateContext,System.Threading.Tasks.Task{``1}})">
            <summary>
            Registers a type with a <see cref="T:Func{T, string, TemplateContext, Task{TResult}}"/> to retrieve any of
            its property values.
            </summary>
            <param name="strategy">The <see cref="T:Fluid.MemberAccessStrategy"/>.</param>
            <param name="accessor">The <see cref="T:Func{T, string, TemplateContext, Task{TResult}}"/> instance used to retrieve the value.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register``2(Fluid.MemberAccessStrategy,System.String,System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Registers a type with a <see cref="T:Func{T, Task{TResult}}"/> to retrieve the given property's value.
            </summary>
            <param name="strategy">The <see cref="T:Fluid.MemberAccessStrategy"/>.</param>
            <param name="name">The name of the property.</param>
            <param name="accessor">The <see cref="T:Func{T, Task{TResult}}"/> instance used to retrieve the value.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register``2(Fluid.MemberAccessStrategy,System.String,System.Func{``0,Fluid.TemplateContext,System.Threading.Tasks.Task{``1}})">
            <summary>
            Registers a type with a <see cref="T:Func{T, TemplateContext, Task{Object}}"/> to retrieve the given property's value.
            </summary>
            <param name="strategy">The <see cref="T:Fluid.MemberAccessStrategy"/>.</param>
            <param name="name">The name of the property.</param>
            <param name="accessor">The <see cref="T:Func{T, TemplateContext, Task{Object}}"/> instance used to retrieve the value.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register``2(Fluid.MemberAccessStrategy,System.String,System.Func{``0,``1})">
            <summary>
            Registers a type with a <see cref="T:System.Func`2"/> to retrieve the property specified.
            </summary>
            <param name="strategy">The <see cref="T:Fluid.MemberAccessStrategy"/>.</param>
            <param name="name">The name of the property.</param>
            <param name="accessor">The <see cref="T:System.Func`2"/> instance used to retrieve the value.</param>
        </member>
        <member name="M:Fluid.MemberAccessStrategyExtensions.Register``2(Fluid.MemberAccessStrategy,System.String,System.Func{``0,Fluid.TemplateContext,``1})">
            <summary>
            Registers a type with a <see cref="T:System.Func`3"/> to retrieve the property specified.
            </summary>
            <param name="strategy">The <see cref="T:Fluid.MemberAccessStrategy"/>.</param>
            <param name="name">The name of the property.</param>
            <param name="accessor">The <see cref="T:System.Func`3"/> instance used to retrieve the value.</param>
        </member>
        <member name="T:Fluid.Parser.TagParsers.TagEndParser">
            <summary>
            Search for `%}`, `-%}` to close a tag.
            Also, if the tag is inside a `liquid` tag, it will only look for a new line to close the tag.
            </summary>
        </member>
        <member name="P:Fluid.Scope.Properties">
            <summary>
            Gets the own properties of the scope
            </summary>
        </member>
        <member name="P:Fluid.Scope.Parent">
            <summary>
            Gets the parent scope if any.
            </summary>
        </member>
        <member name="M:Fluid.Scope.GetValue(System.String)">
            <summary>
            Returns the value with the specified name in the chain of scopes, or undefined
            if it doesn't exist.
            </summary>
            <param name="name">The name of the value to return.</param>
        </member>
        <member name="M:Fluid.Scope.Delete(System.String)">
            <summary>
            Deletes the value with the specified name in the chain of scopes.
            </summary>
            <param name="name">The name of the value to delete.</param>
        </member>
        <member name="M:Fluid.Scope.DeleteOwn(System.String)">
            <summary>
            Deletes the value with the specified name in the current scopes.
            </summary>
            <param name="name">The name of the value to delete.</param>
        </member>
        <member name="M:Fluid.Scope.SetValue(System.String,Fluid.Values.FluidValue)">
            <summary>
            Sets the value with the specified name in the chain of scopes.
            </summary>
        </member>
        <member name="M:Fluid.Scope.SetOwnValue(System.String,Fluid.Values.FluidValue)">
            <summary>
            Sets the value with the specified name in the current scope.
            </summary>
        </member>
        <member name="M:Fluid.Scope.CopyTo(Fluid.Scope)">
            <summary>
            Copies all the local scope properties to a different one.
            </summary>
        </member>
        <member name="M:Fluid.TemplateContext.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Fluid.TemplateContext"/>.
            </summary>
        </member>
        <member name="M:Fluid.TemplateContext.#ctor(System.Object,Fluid.TemplateOptions,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Fluid.TemplateContext"/>.
            </summary>
            <param name="model">The model.</param>
            <param name="options">The template options.</param>
            <param name="allowModelMembers">Whether the members of the model can be accessed by default.</param>
        </member>
        <member name="M:Fluid.TemplateContext.#ctor(Fluid.TemplateOptions,System.StringComparer)">
            <summary>
            Initializes a new instance of <see cref="T:Fluid.TemplateContext"/> with the specified <see cref="T:Fluid.TemplateOptions"/>.
            </summary>
            <param name="options">The template options.</param>
            <param name="modelNamesComparer">An optional <see cref="T:System.StringComparer"/> instance used when comparing model names.</param>
        </member>
        <member name="M:Fluid.TemplateContext.#ctor(System.Object,System.Boolean,System.StringComparer)">
            <summary>
            Initializes a new instance of <see cref="T:Fluid.TemplateContext"/> wih a model and option register its properties.
            </summary>
            <param name="model">The model.</param>
            <param name="allowModelMembers">Whether the members of the model can be accessed by default.</param>
            <param name="modelNamesComparer">An optional <see cref="T:System.StringComparer"/> instance used when comparing model names.</param>
        </member>
        <member name="P:Fluid.TemplateContext.Options">
            <summary>
            Gets the <see cref="T:Fluid.TemplateOptions"/>.
            </summary>
        </member>
        <member name="P:Fluid.TemplateContext.MaxSteps">
            <summary>
            Gets or sets the maximum number of steps a script can execute. Leave to 0 for unlimited.
            </summary>
        </member>
        <member name="P:Fluid.TemplateContext.ModelNamesComparer">
            <summary>
            Gets <see cref="T:System.StringComparer"/> used when comparing model names.
            </summary>
        </member>
        <member name="P:Fluid.TemplateContext.CultureInfo">
            <summary>
            Gets or sets the <see cref="P:Fluid.TemplateContext.CultureInfo"/> instance used to render locale values like dates and numbers.
            </summary>
        </member>
        <member name="P:Fluid.TemplateContext.Now">
            <summary>
            Gets or sets the value to returned by the "now" keyword.
            </summary>
        </member>
        <member name="P:Fluid.TemplateContext.TimeZone">
            <summary>
            Gets or sets the local time zone used when parsing or creating dates without specific ones.
            </summary>
        </member>
        <member name="M:Fluid.TemplateContext.IncrementSteps">
            <summary>
            Increments the number of statements the current template is processing.
            </summary>
        </member>
        <member name="P:Fluid.TemplateContext.LocalScope">
            <summary>
            Gets or sets the current scope.
            </summary>
        </member>
        <member name="P:Fluid.TemplateContext.RootScope">
            <summary>
            Gets or sets the root scope.
            </summary>
        </member>
        <member name="P:Fluid.TemplateContext.AmbientValues">
            <summary>
            Used to define custom object on this instance to be used in filters and statements
            but which are not available from the template.
            </summary>
        </member>
        <member name="P:Fluid.TemplateContext.Model">
            <summary>
            Gets or sets a model object that is used to resolve properties in a template. This object is used if local and
            global scopes are unsuccessful.
            </summary>
        </member>
        <member name="P:Fluid.TemplateContext.AllowModelMembers">
            <summary>
            Whether the direct properties of the Model can be accessed without being registered. Default is <code>true</code>.
            </summary>
        </member>
        <member name="P:Fluid.TemplateContext.Captured">
            <summary>
            Gets or sets the delegate to execute when a Capture tag has been evaluated.
            </summary>
        </member>
        <member name="P:Fluid.TemplateContext.Assigned">
            <summary>
            Gets or sets the delegate to execute when an Assign tag has been evaluated.
            </summary>
        </member>
        <member name="M:Fluid.TemplateContext.EnterChildScope">
            <summary>
            Creates a new isolated child scope. After than any value added to this content object will be released once
            <see cref="M:Fluid.TemplateContext.ReleaseScope" /> is called. The previous scope is linked such that its values are still available.
            </summary>
        </member>
        <member name="M:Fluid.TemplateContext.EnterForLoopScope">
            <summary>
            Creates a new for loop scope. After than any value added to this content object will be released once
            <see cref="M:Fluid.TemplateContext.ReleaseScope" /> is called. The previous scope is linked such that its values are still available.
            </summary>
        </member>
        <member name="M:Fluid.TemplateContext.ReleaseScope">
            <summary>
            Exits the current scope that has been created by <see cref="M:Fluid.TemplateContext.EnterChildScope" />
            </summary>
        </member>
        <member name="P:Fluid.TemplateContext.ValueNames">
            <summary>
            Gets the names of the values.
            </summary>
        </member>
        <member name="M:Fluid.TemplateContext.GetValue(System.String)">
            <summary>
            Gets a value from the context.
            </summary>
            <param name="name">The name of the value.</param>
        </member>
        <member name="M:Fluid.TemplateContext.SetValue(System.String,Fluid.Values.FluidValue)">
            <summary>
            Sets a value on the context.
            </summary>
            <param name="name">The name of the value.</param>
            <param name="value">The value to set.</param>
            <returns></returns>
        </member>
        <member name="T:Fluid.TemplateOptions.AssignedDelegate">
            <param name="identifier">The name of the property that is assigned.</param>
            <param name="value">The value that is assigned.</param>
            <param name="context">The <see cref="T:Fluid.TemplateContext" /> instance used for rendering the template.</param>
            <returns>The value which should be assigned to the property.</returns>
        </member>
        <member name="T:Fluid.TemplateOptions.CapturedDelegate">
            <param name="identifier">The name of the property that is assigned.</param>
            <param name="value">The value that is assigned.</param>
            <param name="context">The <see cref="T:Fluid.TemplateContext" /> instance used for rendering the template.</param>
            <returns>The value which should be captured.</returns>
        </member>
        <member name="P:Fluid.TemplateOptions.MemberAccessStrategy">
            <summary>
            Gets ot sets the members than can be accessed in a template.
            </summary>
        </member>
        <member name="P:Fluid.TemplateOptions.FileProvider">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider"/> used to access files for include and render statements.
            </summary>
        </member>
        <member name="P:Fluid.TemplateOptions.TemplateCache">
            <summary>
            Gets or sets the <see cref="T:Fluid.ITemplateCache"/> used to cache templates loaded from <see cref="P:Fluid.TemplateOptions.FileProvider"/>.
            </summary>
            <remarks>
            The instance needs to be thread-safe for insertion and retrieval of cached entries.
            </remarks>
        </member>
        <member name="P:Fluid.TemplateOptions.MaxSteps">
            <summary>
            Gets or sets the maximum number of steps a script can execute. Leave to 0 for unlimited.
            </summary>
        </member>
        <member name="P:Fluid.TemplateOptions.ModelNamesComparer">
            <summary>
            Gets or sets the <see cref="T:System.StringComparer"/> to use when comparing model names.
            </summary>
            <value>
            Default value is <see cref="P:System.StringComparer.OrdinalIgnoreCase"/>
            </value>
        </member>
        <member name="P:Fluid.TemplateOptions.CultureInfo">
            <summary>
            Gets or sets the <see cref="P:Fluid.TemplateOptions.CultureInfo"/> instance used to render locale values like dates and numbers.
            </summary>
        </member>
        <member name="P:Fluid.TemplateOptions.Now">
            <summary>
            Gets or sets the value returned by the "now" keyword.
            </summary>
        </member>
        <member name="P:Fluid.TemplateOptions.TimeZone">
            <summary>
            Gets or sets the local time zone used when parsing or creating dates without specific ones.
            </summary>
        </member>
        <member name="P:Fluid.TemplateOptions.MaxRecursion">
            <summary>
            Gets or sets the maximum depth of recursions a script can execute. 100 by default.
            </summary>
        </member>
        <member name="P:Fluid.TemplateOptions.Filters">
            <summary>
            Gets the collection of filters available in the templates.
            </summary>
        </member>
        <member name="P:Fluid.TemplateOptions.Scope">
            <summary>
            Gets a scope that is available in all the templates.
            </summary>
        </member>
        <member name="P:Fluid.TemplateOptions.ValueConverters">
            <summary>
            Gets the list of value converters.
            </summary>
        </member>
        <member name="P:Fluid.TemplateOptions.Captured">
            <summary>
            Gets or sets the delegate to execute when a Capture tag has been evaluated.
            </summary>
        </member>
        <member name="P:Fluid.TemplateOptions.Assigned">
            <summary>
            Gets or sets the delegate to execute when an Assign tag has been evaluated.
            </summary>
        </member>
        <member name="P:Fluid.TemplateOptions.JavaScriptEncoder">
            <summary>
            Gets or sets the <see cref="P:Fluid.TemplateOptions.JavaScriptEncoder" /> instance used by the <c>json</c> filter.
            </summary>
        </member>
        <member name="P:Fluid.TemplateOptions.Trimming">
            <summary>
            Gets or sets the default trimming rules.
            </summary>
        </member>
        <member name="P:Fluid.TemplateOptions.Greedy">
            <summary>
            Gets or sets whether trimming is greedy. Default is true. When set to true, all successive blank chars are trimmed.
            </summary>
        </member>
        <member name="F:Fluid.TrimmingFlags.None">
            <summary>
            Default. Tags and outputs are not trimmed unless the '-' is set on the delimiter.
            </summary>
        </member>
        <member name="F:Fluid.TrimmingFlags.TagLeft">
            <summary>
            Strip blank characters (including , \t, and \r) from the left of tags ({% %}) until \n (exclusive when greedy option os off).
            </summary>
        </member>
        <member name="F:Fluid.TrimmingFlags.TagRight">
            <summary>
            Strip blank characters (including , \t, and \r) from the right of tags ({% %}) until \n (inclusive when greedy option os off).
            </summary>
        </member>
        <member name="F:Fluid.TrimmingFlags.OutputLeft">
            <summary>
            Strip blank characters (including , \t, and \r) from the left of values ({{ }}) until \n (exclusive when greedy option os off).
            </summary>
        </member>
        <member name="F:Fluid.TrimmingFlags.OutputRight">
            <summary>
            Strip blank characters (including , \t, and \r) from the right of values ({{ }}) until \n (inclusive when greedy option os off).
            </summary>
        </member>
        <member name="T:Fluid.Utils.ObjectPool`1">
             <summary>
             Generic implementation of object pooling pattern with predefined pool size limit. The main
             purpose is that limited number of frequently used objects can be kept in the pool for
             further recycling.
            
             Notes:
             1) it is not the goal to keep all returned objects. Pool is not meant for storage. If there
                is no space in the pool, extra returned objects will be dropped.
            
             2) it is implied that if object was obtained from a pool, the caller will return it back in
                a relatively short time. Keeping checked out objects for long durations is ok, but
                reduces usefulness of pooling. Just new up your own.
            
             Not returning objects to the pool in not detrimental to the pool's work, but is a bad practice.
             Rationale:
                If there is no intent for reusing the object, do not use pool - just use "new".
             </summary>
        </member>
        <member name="T:Fluid.Utils.ObjectPool`1.Factory">
            <remarks>
            Not using System.Func{T} because this file is linked into the (debugger) Formatter,
            which does not have that type (since it compiles against .NET 2.0).
            </remarks>
        </member>
        <member name="M:Fluid.Utils.ObjectPool`1.Allocate">
            <summary>
            Produces an instance.
            </summary>
            <remarks>
            Search strategy is a simple linear probing which is chosen for it cache-friendliness.
            Note that Free will try to store recycled objects close to the start thus statistically
            reducing how far we will typically search.
            </remarks>
        </member>
        <member name="M:Fluid.Utils.ObjectPool`1.Free(`0)">
            <summary>
            Returns objects to the pool.
            </summary>
            <remarks>
            Search strategy is a simple linear probing which is chosen for it cache-friendliness.
            Note that Free will try to store recycled objects close to the start thus statistically
            reducing how far we will typically search in Allocate.
            </remarks>
        </member>
        <member name="T:Fluid.Utils.StringBuilderPool">
            <summary>
            The usage is:
                   var inst = StringBuilderPool.GetInstance();
                   var sb = inst.builder;
                   ... Do Stuff...
                   ... sb.ToString() ...
                   inst.Free();
            </summary>
        </member>
        <member name="M:Fluid.Utils.StringBuilderPool.CreatePool(System.Int32,System.Int32)">
            <summary>
            If someone need to create a private pool
            </summary>
        </member>
        <member name="M:Fluid.Utils.StringBuilderPool.GetInstance">
            <summary>
            Returns a StringBuilder from the default pool.
            </summary>
        </member>
        <member name="M:Fluid.Values.FluidValue.FirstOrDefault(Fluid.TemplateContext)">
            <summary>
            Returns the first element. Used by the <code>first</code> filter.
            </summary>
        </member>
        <member name="M:Fluid.Values.FluidValue.LastOrDefault(Fluid.TemplateContext)">
            <summary>
            Returns the last element. Used by the <code>last</code> filter.
            </summary>
        </member>
        <member name="T:Fluid.Values.NumberValue">
            Numbers are stored as decimal values to handle the best possible precision.
            Decimals also have the capacity of retaining their precision across
            operations:
            1 * 2 = 2
            1.0 * 2.0 = 2.00
        </member>
        <member name="M:Fluid.Values.NumberValue.GetScale(System.Decimal)">
            <summary>
            Gets the scale of a decimal value, which is the number of digits to the right of the decimal point.
            </summary>
        </member>
        <member name="T:Fluid.Values.ObjectValueBase">
            <summary>
            Inherits from this class to implement custom object wrappers.
            </summary>
        </member>
        <member name="P:Fluid.Values.StringValue.Encode">
            <summary>
            Gets or sets whether the string is encoded (default) or not when rendered.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute">
            <summary>
            Specifies the priority of a member in overload resolution. When unspecified, the default priority is 0.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute"/> class.
            </summary>
            <param name="priority">The priority of the attributed member. Higher numbers are prioritized, lower numbers are deprioritized. 0 is the default if no attribute is present.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.Priority">
            <summary>
            The priority of the member.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ParamCollectionAttribute">
            <summary>
            Indicates that a method will allow a variable number of arguments in its invocation.
            </summary>
        </member>
    </members>
</doc>
